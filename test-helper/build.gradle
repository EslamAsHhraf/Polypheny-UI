plugins {
    id "java-library"
    id "idea"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "io.freefair.lombok" version "5.3.0"
    id "application"
}

group "org.polypheny.ui"
description = "A helper that prepares Polypheny-DB in order to test Polypheny-UI."

def versionMajor = 1
def versionMinor = 0
def versionQualifier = "SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier


repositories {
    mavenCentral()
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources", "${buildDir}/webjars-content"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}


dependencies {
    implementation group: "org.polypheny", name: "polypheny-jdbc-driver", version: "1.5"

    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.30" // MIT
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.13.1" // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: "2.13.1" // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-api", version: "2.13.1" // Apache 2.0

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


ext {
    javaMainClass = "org.polypheny.ui.test.TestHelper"
}


application {
    mainClassName = javaMainClass
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE

    options.setOutputLevel(JavadocOutputLevel.QUIET)
    options.quiet()
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": project.version
        attributes "Main-Class": "org.polypheny.simpleclient.cli.Main"
        attributes "Multi-Release": "true"
        attributes "Implementation-Version": project.version
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    zip64 true
    classifier = ""
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}


test {
    useJUnitPlatform()
}


/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}